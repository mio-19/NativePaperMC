From 43fb817a2f7db94760405bfac4ff4a9a4a1cfd0b Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=E3=84=97=E3=84=A0=CB=8B=20=E3=84=91=E3=84=A7=CB=8A?=
 <tsao-chi@the-lingo.org>
Date: Fri, 6 Mar 2020 18:25:12 +0800
Subject: [PATCH] patch

---
 .../minecraftdata/MinecraftKeybindData.java   |  3 +-
 protocolsupport/utils/ReflectionUtils.java    |  6 ++-
 .../SpigotEntityTrackerEntryInjector.java     | 41 +++++++++----------
 3 files changed, 26 insertions(+), 24 deletions(-)

diff --git a/protocolsupport/protocol/utils/minecraftdata/MinecraftKeybindData.java b/protocolsupport/protocol/utils/minecraftdata/MinecraftKeybindData.java
index 81946b84..e53e3ab1 100644
--- a/protocolsupport/protocol/utils/minecraftdata/MinecraftKeybindData.java
+++ b/protocolsupport/protocol/utils/minecraftdata/MinecraftKeybindData.java
@@ -15,7 +15,8 @@ public class MinecraftKeybindData {
     }
 
     static {
-        ResourceUtils.getAsBufferedReader(MinecraftData.getResourcePath("keybinds")).lines().filter((s) -> {
+        // MinecraftData will cause `java.lang.IllegalStateException: Access to implementation before detect` when build-time init
+        ResourceUtils.getAsBufferedReader("data/" + "keybinds").lines().filter((s) -> {
             return !s.isEmpty();
         }).forEach((s) -> {
             String[] astring = s.split("[:]");
diff --git a/protocolsupport/utils/ReflectionUtils.java b/protocolsupport/utils/ReflectionUtils.java
index 9d5bb589..4e1fff0d 100644
--- a/protocolsupport/utils/ReflectionUtils.java
+++ b/protocolsupport/utils/ReflectionUtils.java
@@ -48,11 +48,13 @@ public class ReflectionUtils {
         throw new RuntimeException("Can't find method " + s + " with params length " + i);
     }
 
+    // All methods from java.lang.invoke should have been replaced during image building.
     public static void setStaticFinalField(Class<?> oclass, String s, Object object) {
         try {
             Field field = (Field) setAccessible(oclass.getDeclaredField(s));
-
-            ((Lookup) ((Field) setAccessible(Lookup.class.getDeclaredField("IMPL_LOOKUP"))).get((Object) null)).findSetter(Field.class, "modifiers", Integer.TYPE).invokeExact(field, field.getModifiers() & -17);
+            Field modifiersField = Field.class.getDeclaredField("modifiers");
+            modifiersField.setAccessible(true);
+            modifiersField.setInt(field, field.getModifiers() & ~java.lang.reflect.Modifier.FINAL);
             field.set((Object) null, object);
         } catch (Throwable throwable) {
             throw new RuntimeException(throwable);
diff --git a/protocolsupport/zplatform/impl/spigot/entitytracker/SpigotEntityTrackerEntryInjector.java b/protocolsupport/zplatform/impl/spigot/entitytracker/SpigotEntityTrackerEntryInjector.java
index 6ffc52bb..9dffe852 100644
--- a/protocolsupport/zplatform/impl/spigot/entitytracker/SpigotEntityTrackerEntryInjector.java
+++ b/protocolsupport/zplatform/impl/spigot/entitytracker/SpigotEntityTrackerEntryInjector.java
@@ -1,37 +1,36 @@
 package protocolsupport.zplatform.impl.spigot.entitytracker;
 
-import java.lang.invoke.MethodHandle;
+import java.lang.reflect.Field;
+import java.lang.reflect.Modifier;
 import java.lang.invoke.MethodHandles;
 import java.util.function.BiFunction;
 import net.minecraft.server.v1_15_R1.Entity;
 import net.minecraft.server.v1_15_R1.EntityTrackerEntry;
 import net.minecraft.server.v1_15_R1.PlayerChunkMap.EntityTracker;
-import protocolsupport.utils.ReflectionUtils;
 
 public class SpigotEntityTrackerEntryInjector {
+    // All methods from java.lang.invoke should have been replaced during image building.
 
-    private static final MethodHandle setTrackerEntryField = createSetTrackerEntryFieldMH();
-    private static final MethodHandle getEntityField = createGetEntityFieldMH();
+    private static final Field trackerEntryField = initFinalField(EntityTracker.class, "trackerEntry");
+    private static final Field entityField = initFinalField(EntityTracker.class, "tracker");
 
-    public SpigotEntityTrackerEntryInjector() {}
-
-    private static final MethodHandle createSetTrackerEntryFieldMH() {
-        try {
-            return MethodHandles.lookup().unreflectSetter(ReflectionUtils.getField(EntityTracker.class, "trackerEntry"));
-        } catch (IllegalAccessException illegalaccessexception) {
-            throw new RuntimeException("Unable to create set tracker entry field method handle", illegalaccessexception);
-        }
-    }
+    // https://stackoverflow.com/questions/3301635/change-private-static-final-field-using-java-reflection
+	private static final Field initFinalField(Class<?> clazz, String fieldname) {
+		try {
+			Field field = clazz.getDeclaredField(fieldname);
+			field.setAccessible(true);
+			Field modifiersField = Field.class.getDeclaredField("modifiers");
+			modifiersField.setAccessible(true);
+			modifiersField.setInt(field, field.getModifiers() & ~Modifier.FINAL);
+			return field;
+		} catch (Throwable e) {
+			throw new RuntimeException(e);
+		}
+	}
 
-    private static final MethodHandle createGetEntityFieldMH() {
-        try {
-            return MethodHandles.lookup().unreflectGetter(ReflectionUtils.getField(EntityTracker.class, "tracker"));
-        } catch (IllegalAccessException illegalaccessexception) {
-            throw new RuntimeException("Unable to create set tracker entry field method handle", illegalaccessexception);
-        }
-    }
+    public SpigotEntityTrackerEntryInjector() {}
 
     public static void injectEntry(EntityTracker entitytracker, BiFunction<EntityTracker, Entity, EntityTrackerEntry> bifunction) throws Throwable {
-        SpigotEntityTrackerEntryInjector.setTrackerEntryField.invokeExact(entitytracker, (EntityTrackerEntry) bifunction.apply(entitytracker, SpigotEntityTrackerEntryInjector.getEntityField.invokeExact(entitytracker)));
+        trackerEntryField.set(entitytracker, bifunction.apply(entitytracker, (Entity) entityField.get(entitytracker)));
     }
 }
-- 
2.25.1

